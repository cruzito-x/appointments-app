generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id         Int       @id @default(autoincrement())
  name       String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  users      User[]
}

model User {
  id         Int       @id @default(autoincrement())
  username   String    @unique
  password   String
  email      String    @unique
  roleId     Int
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  personal   Personal?
  role       Role      @relation(fields: [roleId], references: [id])
}

model Specialty {
  id         Int                 @id @default(autoincrement())
  name       String
  created_at DateTime            @default(now())
  updated_at DateTime            @updatedAt
  deleted_at DateTime?
  personal   PersonalSpecialty[]
}

model Personal {
  id               Int                 @id @default(autoincrement())
  userId           Int                 @unique
  created_at       DateTime            @default(now())
  updated_at       DateTime?           @updatedAt
  deleted_at       DateTime?
  name             String?             @db.VarChar
  years_experience Int?
  patients_helped  Int?
  titles           AcademicTitle[]
  appointments     Appointment[]
  user             User                @relation(fields: [userId], references: [id])
  specialties      PersonalSpecialty[]
  reminders        Reminder[]
}

model AcademicTitle {
  id         Int       @id @default(autoincrement())
  name       String
  personalId Int
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  personal   Personal  @relation(fields: [personalId], references: [id])
}

model PersonalSpecialty {
  id          Int       @id @default(autoincrement())
  personalId  Int
  specialtyId Int
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?
  personal    Personal  @relation(fields: [personalId], references: [id])
  specialty   Specialty @relation(fields: [specialtyId], references: [id])
}

model Patient {
  id           Int           @id @default(autoincrement())
  firstName    String
  lastName     String
  birthDate    DateTime
  created_at   DateTime      @default(now())
  updated_at   DateTime?     @updatedAt
  deleted_at   DateTime?
  appointments Appointment[]
  files        PatientFile[]
  payments     Payment[]
}

model Appointment {
  id         Int                  @id @default(autoincrement())
  patientId  Int
  personalId Int
  date       DateTime
  status     String
  created_at DateTime             @default(now())
  updated_at DateTime             @updatedAt
  deleted_at DateTime?
  patient    Patient              @relation(fields: [patientId], references: [id])
  personal   Personal             @relation(fields: [personalId], references: [id])
  history    AppointmentHistory[]
}

model AppointmentHistory {
  id            Int         @id @default(autoincrement())
  appointmentId Int
  status        String
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  deleted_at    DateTime?
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
}

model Reminder {
  id          Int       @id @default(autoincrement())
  personalId  Int
  title       String
  description String?
  priority    Int
  status      String
  date        DateTime
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?
  personal    Personal  @relation(fields: [personalId], references: [id])
}

model Payment {
  id         Int             @id @default(autoincrement())
  patientId  Int
  amount     Float
  date       DateTime
  created_at DateTime        @default(now())
  updated_at DateTime        @updatedAt
  deleted_at DateTime?
  patient    Patient         @relation(fields: [patientId], references: [id])
  details    PaymentDetail[]
}

model PaymentDetail {
  id          Int       @id @default(autoincrement())
  paymentId   Int
  description String
  amount      Float
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?
  payment     Payment   @relation(fields: [paymentId], references: [id])
}

model PatientFile {
  id                  Int                 @id @default(autoincrement())
  patientId           Int
  created_at          DateTime            @default(now())
  updated_at          DateTime?           @updatedAt
  deleted_at          DateTime?
  emergency_contact_1 String?             @db.VarChar(9)
  emergency_contact_2 String?             @db.VarChar(9)
  occupation          String?             @db.VarChar(100)
  institution         String?             @db.VarChar(100)
  sex                 String?             @db.Char
  patient             Patient             @relation(fields: [patientId], references: [id])
  details             PatientFileDetail[]
}

model PatientFileDetail {
  id               Int         @id @default(autoincrement())
  patientFileId    Int
  filePath         String
  description      String?
  created_at       DateTime    @default(now())
  updated_at       DateTime?   @updatedAt
  deleted_at       DateTime?
  last_appointment DateTime?
  next_appointment DateTime?
  patientFile      PatientFile @relation(fields: [patientFileId], references: [id])
}
