generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id         Int      @id @default(autoincrement())
  name       String
  users      User[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?
}

model User {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  password   String
  email      String   @unique
  roleId     Int
  role       Role     @relation(fields: [roleId], references: [id])
  personal   Personal?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?
}

model Specialty {
  id         Int      @id @default(autoincrement())
  name       String
  personal   PersonalSpecialty[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?
}

model Personal {
  id         Int      @id @default(autoincrement())
  userId     Int      @unique
  user       User     @relation(fields: [userId], references: [id])
  specialties PersonalSpecialty[]
  reminders  Reminder[]
  titles     AcademicTitle[]
  appointments Appointment[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?
}

model AcademicTitle {
  id         Int      @id @default(autoincrement())
  name       String
  personalId Int
  personal   Personal @relation(fields: [personalId], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?
}

model PersonalSpecialty {
  id           Int      @id @default(autoincrement())
  personalId   Int
  specialtyId  Int
  personal     Personal  @relation(fields: [personalId], references: [id])
  specialty    Specialty @relation(fields: [specialtyId], references: [id])
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  deleted_at   DateTime?
}

model Patient {
  id         Int      @id @default(autoincrement())
  firstName  String
  lastName   String
  birthDate  DateTime
  appointments Appointment[]
  payments   Payment[]
  files      PatientFile[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?
}

model Appointment {
  id         Int      @id @default(autoincrement())
  patientId  Int
  personalId Int
  date       DateTime
  status     String
  patient    Patient  @relation(fields: [patientId], references: [id])
  personal   Personal @relation(fields: [personalId], references: [id])
  history    AppointmentHistory[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?
}

model AppointmentHistory {
  id            Int      @id @default(autoincrement())
  appointmentId Int
  status        String
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  deleted_at    DateTime?
}

model Reminder {
  id         Int      @id @default(autoincrement())
  personalId Int
  title      String
  description String?
  priority   Int
  status     String
  date       DateTime
  personal   Personal @relation(fields: [personalId], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?
}

model Payment {
  id         Int      @id @default(autoincrement())
  patientId  Int
  amount     Float
  date       DateTime
  patient    Patient  @relation(fields: [patientId], references: [id])
  details    PaymentDetail[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?
}

model PaymentDetail {
  id         Int      @id @default(autoincrement())
  paymentId  Int
  description String
  amount     Float
  payment    Payment @relation(fields: [paymentId], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?
}

model PatientFile {
  id         Int      @id @default(autoincrement())
  patientId  Int
  patient    Patient  @relation(fields: [patientId], references: [id])
  details    PatientFileDetail[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?
}

model PatientFileDetail {
  id         Int      @id @default(autoincrement())
  patientFileId Int
  filePath   String
  description String?
  patientFile PatientFile @relation(fields: [patientFileId], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?
}
